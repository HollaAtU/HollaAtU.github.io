<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zrlreo.github.io/</id>
    <title>不似咸鱼是咸鱼</title>
    <updated>2020-03-16T10:02:15.891Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zrlreo.github.io/"/>
    <link rel="self" href="https://zrlreo.github.io/atom.xml"/>
    <subtitle>只想过平静的生活</subtitle>
    <logo>https://zrlreo.github.io/images/avatar.png</logo>
    <icon>https://zrlreo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 不似咸鱼是咸鱼</rights>
    <entry>
        <title type="html"><![CDATA[【LeetCode】 102. Binary Tree Level Order Traversal]]></title>
        <id>https://zrlreo.github.io/post/leetcode-102-binary-tree-level-order-traversal/</id>
        <link href="https://zrlreo.github.io/post/leetcode-102-binary-tree-level-order-traversal/">
        </link>
        <updated>2020-03-16T09:13:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题干">题干</h1>
<p>Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).</p>
<p>For example:<br>
Given binary tree [3,9,20,null,null,15,7],</p>
<blockquote>
<p>3<br>
/ <br>
9  20<br>
/  <br>
15   7</p>
</blockquote>
<p>return its level order traversal as:</p>
<blockquote>
<p>[<br>
[3],<br>
[9,20],<br>
[15,7]<br>
]</p>
</blockquote>
<h1 id="解析">解析</h1>
<p>为了层次遍历树，首先考虑如何分隔每层。利用队列，同时用null分隔每层，算法：首先root入队，然后入队一个Null，接着采用递归，每次处理一个节点，都将其子节点（left和right）放到队列中。然后不断的出队， 如果出队的是null，则表示这一层已经结束了，就继续push一个null。</p>
<h1 id="python">Python</h1>
<pre><code># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -&gt; List[List[int]]:
        if root is None:
            return []
        result = []

        def add_to_result(level, node):#将当前节点，当前所在的level以及结果数组传递给递归函数
            if level &gt; len(result) - 1:
                result.append([])
            result[level].append(node.val)#将节点的值添加到level参数对应结果数组元素中
            if node.left:
                add_to_result(level+1, node.left)
            if node.right:
                add_to_result(level+1, node.right)
        
        add_to_result(0, root)
        return result</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LeetCode】 94. Binary Tree Inorder Traversal]]></title>
        <id>https://zrlreo.github.io/post/leetcode-94-binary-tree-inorder-traversal/</id>
        <link href="https://zrlreo.github.io/post/leetcode-94-binary-tree-inorder-traversal/">
        </link>
        <updated>2020-03-15T10:21:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题干">题干</h1>
<p>Given a binary tree, return the inorder traversal of its nodes' values.</p>
<p>Example:</p>
<blockquote>
<p>Input: [1,null,2,3]<br>
1<br>
<br>
2<br>
/<br>
3</p>
<p>Output: [1,3,2]</p>
</blockquote>
<p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>
<h1 id="解析">解析</h1>
<h2 id="思路一递归">思路一：递归</h2>
<p>递归只需要一句话，就是把一棵树转化为许多个可以容易得到的节点值，最后进行列表的拼接。<br>
递归需要注意两点，一个是终止条件，一个如何缩小规模<br>
1.终止条件，当前这个元素是null（链表也是一样）<br>
2.缩小规模，由于二叉树本身就是一个递归结构， 每次处理一个子树其实就是缩小了规模， 难点在于如何合并结果，这里的合并结果其实就是left.concat(mid).concat(right), mid是一个具体的节点，left和right递归求出即可</p>
<h1 id="python">Python</h1>
<pre><code># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root: TreeNode) -&gt; List[int]:
        if root is None:
            return []
        return self.inorderTraversal(root.left)+[root.val]+self.inorderTraversal(root.right)
</code></pre>
<h2 id="思路二迭代">思路二：迭代</h2>
<p>可以借助栈来实现。算法：<br>
1.从根节点开始，将根节点入栈<br>
2.将根节点的左子节点全部入栈，取出栈顶节点，保存节点值<br>
3.如果该栈顶节点有右子节点，将当前指针移到其右子节点上（这样下次循环时又可将其所有左子结点压入栈中）， 重复上一步骤</p>
<h1 id="python-2">Python</h1>
<pre><code># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root: TreeNode) -&gt; List[int]:
        res = []
        stack = []
        # 用p当做指针
        p = root
        while p or stack:
            # 把左子树压入栈中
            while p:
                stack.append(p)
                p = p.left
            # 输出 栈顶元素
            p = stack.pop()
            res.append(p.val)#保存节点
            # 看右子树
            p = p.right
        return res</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LeetCode】 4. Median of Two Sorted Arrays]]></title>
        <id>https://zrlreo.github.io/post/leetcode-4-median-of-two-sorted-arrays/</id>
        <link href="https://zrlreo.github.io/post/leetcode-4-median-of-two-sorted-arrays/">
        </link>
        <updated>2020-03-14T10:28:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题干">题干</h1>
<p>难度：Hard</p>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.</p>
<p>Example 1:</p>
<blockquote>
<p>nums1 = [1, 3]<br>
nums2 = [2]</p>
<p>The median is 2.0</p>
</blockquote>
<p>Example 2:</p>
<blockquote>
<p>nums1 = [1, 2]<br>
nums2 = [3, 4]</p>
<p>The median is (2 + 3)/2 = 2.5</p>
</blockquote>
<h1 id="解析">解析</h1>
<p>设定两个变量i和j，用这两个变量分别分割数组1和数组2，将左半部分合并，将右半部分合并，左半部分的最大值小于右半部分的最小值，且左右两个部分的数量相等或者差1。数量相等时，中位数=（左边最大值+右边最小值）/2；数量差1时，左边比右边多一个，中位数等于左边最大值。</p>
<h1 id="python">Python</h1>
<pre><code>class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:
        m = len(nums1)
        n = len(nums2)
        if m&gt;n:
            m,n,nums1,nums2 = n,m,nums2,nums1
        imax = m
        imin = 0
        half_ls = int((m+n+1)/2)
        while imin&lt;=imax:
            i = int((imax+imin)/2)
            j = half_ls - i
            if i &lt; m and nums1[i]&lt;nums2[j-1]:
                imin = i + 1
            elif i &gt; 0 and nums1[i-1]&gt;nums2[j]:
                imax = i - 1
            else:
                if i == 0:
                    max_left = nums2[j-1]
                elif j == 0:
                    max_left  = nums1[i-1]
                else:
                    max_left = max(nums1[i-1],nums2[j-1])
                if (m+n)%2 == 1:
                    return max_left
                if i == m:
                    min_right = nums2[j]
                elif j == n:
                    min_right = nums1[i]
                else:
                    min_right = min(nums1[i],nums2[j])
                return (max_left+min_right)/2.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LeetCode】 3. Longest Substring Without Repeating Characters]]></title>
        <id>https://zrlreo.github.io/post/leetcode-3-longest-substring-without-repeating-characters/</id>
        <link href="https://zrlreo.github.io/post/leetcode-3-longest-substring-without-repeating-characters/">
        </link>
        <updated>2020-03-14T07:53:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题干">题干</h1>
<p>难度：Medium</p>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Example 1:</p>
<blockquote>
<p>Input: &quot;abcabcbb&quot;<br>
Output: 3<br>
Explanation: The answer is &quot;abc&quot;, with the length of 3.</p>
</blockquote>
<p>Example 2:</p>
<blockquote>
<p>Input: &quot;bbbbb&quot;<br>
Output: 1<br>
Explanation: The answer is &quot;b&quot;, with the length of 1.</p>
</blockquote>
<p>Example 3:</p>
<blockquote>
<p>Input: &quot;pwwkew&quot;<br>
Output: 3<br>
Explanation: The answer is &quot;wke&quot;, with the length of 3.<br>
Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</p>
</blockquote>
<h1 id="解析">解析</h1>
<h2 id="思路一set">思路一：set（）</h2>
<p>使用while循环，如果字符不在set中，就添加进去；如果在set中，就把left对应的字符给remove。需要注意的是，移动left的次数不一定就是1次，因为新添加的right字符出现的位置不一定刚刚就是left指向的位置。set的个数最多的值即为最长子串。</p>
<h1 id="python">Python</h1>
<pre><code>class Solution(object):
    def lengthOfLongestSubstring(self, s):
        left, right = 0, 0
        chars = set()
        res = 0
        while left &lt; len(s) and right &lt; len(s):
            if s[right] in chars:
                if s[left] in chars:
                    chars.remove(s[left])
                left += 1
            else:
                chars.add(s[right])
                right += 1
                res = max(res, len(chars))
        return res
</code></pre>
<h2 id="思路二一次遍历字典">思路二：一次遍历+字典</h2>
<p>当right向后遍历的过程中，如果这个字符在字典中，说明这个字符在前面出现过，即这个区间已经不是题目要求的不含重复字符的区间了，因此，需要移动left到上次right字符在字典中出现的位置的下一个位置。然后用right更新字典，res记录最大区间长度。</p>
<h1 id="python-2">Python</h1>
<pre><code>class Solution:
    def lengthOfLongestSubstring(self, s: str) -&gt; int:
        left,right=0,0
        res=0
        chars=dict()
        for right in range(len(s)):
            if s[right] in chars:
                left=max(left,chars[s[right]]+1)
            chars[s[right]]=right
            res=max(res,right-left+1)
        return res
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LeetCode】 2. Add Two Numbers]]></title>
        <id>https://zrlreo.github.io/post/leetcode-2add-two-numbers/</id>
        <link href="https://zrlreo.github.io/post/leetcode-2add-two-numbers/">
        </link>
        <updated>2020-03-13T10:51:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题干">题干</h1>
<p>难度：Medium</p>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p>Example:</p>
<blockquote>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>
Output: 7 -&gt; 0 -&gt; 8<br>
Explanation: 342 + 465 = 807.</p>
</blockquote>
<h1 id="解析">解析</h1>
<p>由于加数与结果都是逆序排列的，就直接每个节点之间相加。然后需要考虑的问题就是进位了，用一个变量记录上一位的进位，在计算当前位数的和时加上这个进位。</p>
<p>退出循环时根据l1与l2的空与否有三种情况，需要分别讨论。需要注意的是在每一种情况下，不能直接将循环中得出的最后一个节点接上非空的那一个链表：因为可能还有进位。当l1或l2为空，将他们处理为同一变量名l。当l1与l2都为空时，考虑到进位问题，是不能直接返回的，只有在进位为0时才能返回，进位不为0就将其处理为多加一个存储的数字为0的节点。此时循环的结束条件是进位变量为0，但是lnext到为空时不应该停止处理，l为空时当前位值是取不到的，需要进行单独处理。</p>
<h1 id="python">Python</h1>
<pre><code># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:  
        firstVal = l1.val + l2.val
        ret = ListNode(firstVal % 10)
        nowNode = ret
        carry = firstVal // 10
        l1 = l1.next
        l2 = l2.next
        while l1 != None and l2 != None:
            nowVal = carry + l1.val + l2.val
            newNode = ListNode(nowVal % 10)
            nowNode.next = newNode
            nowNode = newNode
            carry = nowVal // 10
            l1 = l1.next
            l2 = l2.next
 
        if l1 != None:
            l = l1
        elif l2 != None:
            l = l2
        else:
            if carry == 0:
                return ret
            else:
                l = ListNode(0)
        while carry != 0:
            if l != None:
                nowVal = carry + l.val
                l = l.next
            else:
                nowVal = carry
            newNode = ListNode(nowVal % 10)
            nowNode.next = newNode
            nowNode = newNode
            carry = nowVal // 10
        if l != None:
            nowNode.next = l
        return ret

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇要写些什么]]></title>
        <id>https://zrlreo.github.io/post/di-yi-pian-yao-xie-xie-shi-me/</id>
        <link href="https://zrlreo.github.io/post/di-yi-pian-yao-xie-xie-shi-me/">
        </link>
        <updated>2020-03-11T03:33:46.000Z</updated>
        <content type="html"><![CDATA[<p>折腾了两天整出了这个简陋的博客，虽然还有大量地方需要改动，但由于我本人极其没有耐心所以就先这样了（逃</p>
<p>3月的今天我还是一只不知未来在何方的菜鸡，自从决定备考GRE后便生生把自己过成了文科生。背单词、刷题、读英文小说、做初中水准的数学题......本就薄弱的专业知识许久未碰，只能看着朋友们突飞猛进的专业水平挠头。</p>
<p>尽管在相当长的一段时间里，和鸡阿姨的斗争将是我生活中的主要矛盾，我也打算尽可能的学点东西并在这里记录下来。</p>
<p>（另外不知道PicGo怎么回事，一会能上传一会上传失败，逐渐暴躁）</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/zrlreo/PicBed_PicGo/master/969C3443BE2357F808B17F3E685B6A87.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>